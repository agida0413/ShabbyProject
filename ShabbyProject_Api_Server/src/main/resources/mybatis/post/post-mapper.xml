<?xml version="1.0" encoding="UTF-8"?>

<!-- 로그인 후 세팅 (닉네임 변경 , 비밀번호 변경 , 휴대폰 번호 변경 , 공개/비공개 모드 전환 , 탈퇴 등 )-->
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
 <mapper namespace="com.sist.mapper.post.PostMapper">
 
 <!--사용자  피드에서 게시물리스트 가져오기-->
 <select id="postList" parameterType="GetUserFeedInformDTO" resultType="PostListDTO">
	SELECT p.post_num, post_img_url ,onlyMe,COALESCE(pl.likeCount,0) AS likeCount <!-- 게시물 고유번호 , 이미지 url , 나만보기 여부 , 좋아요 수 -->
	FROM POST p <!-- 게시물 테이블에서 -->
	LEFT JOIN  <!--left조인-->
	(
	SELECT post_num,COUNT(*) AS likeCount  <!--게시물고유번호,  게시물 고유번호로 그루핑 된 카운트 -->
	FROM post_like       <!-- 게시물 좋아요 테이블에서 -->
	GROUP BY post_num    <!-- 게시물 고유번호로 그루핑 -->
 	) pl
    ON p.post_num=pl.post_num <!-- 게시물 번호 기준 조인 -->
    LEFT JOIN   <!-- 두번째 조인 -->
    ( 
    SELECT pi.post_num, pi.post_img_url <!-- 게시물 고유번호 , 게시물 고유번호로 그루핑된 게시물 이미지 -->
    FROM post_img pi <!-- 게시물 이미지 테이블에서 -->
    INNER JOIN  <!--이너조인 -->
    (
    SELECT post_num, MIN(post_img_num) AS min_img_num <!-- 게시물 번호, 다중 이미지 업로드이기때문에 게시물 번호당 몇개의 레코드가 저장될지 알 수 없는 상황 , pk min집계로 가장 첫번째로 등록된 사진 하나를 갖고옴-->
    FROM post_img <!-- 게시물 이미지 테이블에서 -->
    GROUP BY post_num <!--게시물 번호로 그루핑 -->
    ) subquery 
    ON pi.post_num = subquery.post_num <!--현 인라인뷰 고유번호와 서브쿼리 고유번호 기준 조인 --> 
    AND pi.post_img_num = subquery.min_img_num <!-- 그리고 인라인 뷰 이미지번호와 , 서브쿼리의 위에서 pk min값으로 가져온 하나의 url 조인 -->
    ) pi
    ON p.post_num = pi.post_num <!-- 게시물 테이블의 고유번호와 두번째 인라인뷰의 게시물 고유번호 조인 -->
    <if test="feedState=='USERFEED'">
    	<if test="type=='TAGGED'">
    RIGHT JOIN 
    (
	SELECT post_num FROM MEMBER_TAG
    WHERE id_num = (
		SELECT id_num FROM MEMBER
		WHERE nickname=#{nickname}
	) 
    ) mtSubQuery
    ON p.post_num=mtSubQuery.post_num
    	</if>
    </if>
    <if test="feedState=='SEARCHFEED'">
    INNER JOIN 
    (
		SELECT post_num FROM HOBBY
		WHERE hobby LIKE  CONCAT('%',#{keyword},'%')
	) searchSubQuery
	ON p.post_num= searchSubQuery.post_num
    </if>
  
   
    	<choose>
    		<when test="feedState=='MAINFEED'">
    		WHERE 
    			p.id_num IN
    			(SELECT following_id FROM FOLLOW
    			WHERE id_num=#{idNum}
    			AND
    			approve='FOLLOWOK'
    			)
    			AND
    			onlyMe='NOTONLYME' 
    			ORDER BY create_date DESC
    		</when>
    		
    		<when test="feedState=='GLOBALFEED'||feedState=='SEARCHFEED'">
    		WHERE 
    			p.id_num IN
    			(SELECT id_num FROM MEMBER
    			WHERE locked='PUBLICID' 
    			AND
    			NOT (id_num=#{idNum})   			
    			)
    			AND
    			onlyMe='NOTONLYME' 
    			
    			ORDER BY create_date DESC
    		</when>
    		
    		
    		
    		<when test="feedState=='USERFEED'">
    		
    			<if test="type=='NORMAL'">	
    			WHERE 
    		    p.id_num= <!-- 게시물 테이블-->
			    (
			    SELECT id_num FROM MEMBER <!-- 회원테이블에서 -->
			    WHERE nickname=#{nickname} <!-- 닉네임이 매개변수로 받은닉네임일 경우에-->
			    )
			  </if>
				    <if test="!itsMe">
				    AND
	    		    onlyMe='NOTONLYME' 
				    </if>
			     ORDER BY create_date DESC  <!-- 최신순 정렬 -->
			   
    		</when>
    		<!-- itsMe에 따른 게시물 가져오기 -->
    	</choose>
    	
    
    LIMIT #{rowSize} OFFSET #{startRow}  <!--페이징 -->
 </select>
 
 <!--게시물 삽입과 동시에 pk를 반환받는다 .RequestDTO post_num 세팅-->
 <insert id="postInsert" parameterType="WritePostDTO" useGeneratedKeys="true" keyProperty="postNum">
 	INSERT INTO POST (id_num,content,onlyME)
 	VALUES(#{idNum},#{content},#{onlyMeState})
 </insert>
 <!--게시물 삽입과 동시에 게시물에 입력된 관심사들도 관심사 테이블에 인서트 -->
 <insert id="hobbyInsert" parameterType="WritePostDTO">
  <if test="hobbyList != null and hobbyList.size() > 0">
        INSERT INTO hobby (id_num, post_num, hobby)
        VALUES
        <foreach collection="hobbyList" item="hobby" separator=",">
            (#{idNum}, #{postNum}, #{hobby})
        </foreach>
    </if>
 </insert>	
 
 <!--게시물 삽입과 동시에 게시물에 태그된 인원 이 있다면 게시물 사람태그 테이블에 삽입-->
 <!--회원고유번호를 갖고와야하는데 처음부터 고유번호를 클라이언트에게 보내야할까-->
 <!--보안상  성능이 저하되더라도 서버에서 고유번호를 갖고 오는게 맞는거같다.-->
 <!--컬럼중복반정규화....고려해야할부분-->
 <insert id="followTagInsert" parameterType="WritePostDTO">
   <if test="followTagList != null and followTagList.size() > 0">
        INSERT INTO member_tag (post_num, id_num)
        SELECT  #{postNum}, id_num
        FROM member
        WHERE 
        nickname IN
       <foreach collection="followTagList" item="follow" open="(" separator="," close=")">
       #{follow}
       </foreach>
        ;
    </if>
 </insert>	
 
 <!--s3업로드후 반환받은 url리스트를 게시물 사진 테이블에 인서트-->
 <insert id="postImgInsert" parameterType="WritePostDTO">
 	  <if test="imgUrlList != null and imgUrlList.size() > 0">
    	INSERT INTO POST_IMG (post_num,post_img_url)
    	  VALUES
        <foreach collection="imgUrlList" item="imgUrl" separator=",">
            (#{postNum},#{imgUrl})
        </foreach>
     </if>
 </insert>
 <!-- 게시물 상세보기 정보-->
 <select id="postDetail" parameterType="GetPostDetailDTO" resultType="PostDetailDTO">
  SELECT 
    p.post_num,
    p.id_num,
    p.content,
    p.create_date ,
    p.edit_date ,
    p.onlyMe ,
    m.nickname,
    m.profile,
    pl.likeCheck,
    GROUP_CONCAT(DISTINCT pi.post_img_url ORDER BY pi.post_img_num) AS strImgList,
    GROUP_CONCAT(DISTINCT hb.hobby ORDER BY hb.hb_num) AS strHobbyList,
    GROUP_CONCAT(DISTINCT member_tag.nickname ORDER BY mt.id_num) AS strTagList,
    (
		SELECT COUNT(*) FROM POST_LIKE
		WHERE post_num=p.post_num
	) as likeCount
  FROM post p
  LEFT JOIN MEMBER m ON p.id_num = m.id_num
  LEFT JOIN POST_IMG pi ON p.post_num = pi.post_num
  LEFT JOIN HOBBY hb ON p.post_num = hb.post_num
  LEFT JOIN MEMBER_TAG mt ON p.post_num = mt.post_num
  LEFT JOIN MEMBER member_tag ON mt.id_num = member_tag.id_num
  LEFT JOIN (
	SELECT post_num,id_num as likeCheck FROM POST_LIKE
	WHERE id_num=#{idNum}
  ) pl
  ON p.post_num=pl.post_num
  WHERE p.post_num = #{postNum}
  GROUP BY p.post_num
</select>

<!-- 이미지리스트 s3이미지 삭제-->
<select id="postImgListByPostNum" parameterType="int" resultType="String">
SELECT post_img_url 
FROM POST_IMG 
WHERE post_num=#{postNum}
</select>

 


<!--게시물 삭제 -->
<delete id="postDelete" parameterType="postDelDTO">
DELETE FROM POST 
WHERE post_num=#{postNum}
AND
id_num=#{idNum}
</delete>

<!-- 게시물 수정관련 시작 -->

<!--게시물 내용, 나만보기기능 , 수정일 업데이트 -->
<update id="postInformUpdate" parameterType="WritePostDTO">
UPDATE POST SET
content=#{content},
onlyME=#{onlyMeState},
edit_date=CURRENT_TIMESTAMP
WHERE post_num=#{postNum}
AND id_num=#{idNum}
</update>

<!--기존 이미지 삭제 -->
<delete id="deleteOriginalImg" parameterType="WritePostDTO">
DELETE FROM POST_IMG
WHERE post_num=#{postNum}
AND
post_img_url IN   (
<foreach collection="removeImgList" item="imgUrl" separator=",">
	#{imgUrl}
 </foreach>
   )
</delete>

<!--기존 관심사 삭제 -->
<delete id="deleteOriginalHobby" parameterType="WritePostDTO">
DELETE FROM HOBBY
WHERE post_num=#{postNum}
</delete>

<!--기존 맴버태그 삭제-->
<delete id="deleteOriginalMemTag" parameterType="WritePostDTO">
DELETE FROM MEMBER_TAG
WHERE post_num=#{postNum}
</delete>

<!--게시물 수정관련 종료 -->

 <!--좋아요 삽입-->
<insert id="postLikeInsert" parameterType="DoPostLikeDTO">
INSERT INTO POST_LIKE (id_num,post_num)
VALUES(#{idNum},#{postNum})
</insert> 
<!--좋아요 삭제-->
 <delete id="postLikeDelete" parameterType="DoPostLikeDTO">
DELETE FROM POST_LIKE
WHERE post_num=#{postNum}
AND id_num=#{idNum}
 </delete>
 <!--좋아요 작업 후 변경된 좋아요 수 -->
 <select id="afterDoPostLike" parameterType="int" resultType="int">
 select count(*) as likeCount FROM POST_LIKE
 WHERE post_num=#{postNum}
 </select>
 </mapper>
 
 