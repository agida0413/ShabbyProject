<?xml version="1.0" encoding="UTF-8"?>


<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
 <mapper namespace="com.sist.mapper.PostMapper">
 
 <!-- 게시물리스트 가져오기-->
<select id="postList" parameterType="GetUserFeedInformDTO" resultType="PostListDTO">
	/* 게시물 리스트 */
    SELECT p.post_num                                           /* 게시물 번호 */
         , post_img_url                                         /* 게시물 이미지 */
         , only_me                                              /* 나만보기 여부 */
         , pl.likeCount AS likeCount                            /* 좋아요 수 */
      FROM POST_DATA p                                          /* 게시물 테이블 */
 LEFT JOIN (  
               SELECT post_num
                    , COUNT(*) AS likeCount
                 FROM POST_LIKE pl
                WHERE NOT EXISTS (  
                                     SELECT 1 
                                       FROM MEMBER m 
                                      WHERE m.id_num = pl.id_num
                                        AND m.locked = 'FORBIDDEN'
                                  )                                /* 정지 계정 제외*/    
                GROUP BY post_num                                  /* 각 게시물 별 좋아요 수 집계 서브쿼리 , 조인 */
           ) pl
       ON  p.post_num=pl.post_num 
 LEFT JOIN (
                 SELECT pi.post_num
                      , pi.post_img_url                                     /* 하나의 이미지 */
                   FROM POST_IMG pi                                         /* 게시물 이미지 테이블 */
             INNER JOIN (                                                   /* 조인 내 이미지 하나만 가져오기 위한 서브쿼리 */
                            SELECT post_num
                                 , MIN(post_img_num) AS min_img_num         /* 이미지 테이블 고유번호의 최솟값 하나만 */
                              FROM POST_IMG
                          GROUP BY post_num 
                        ) subquery 
                     ON pi.post_num = subquery.post_num 
                    AND pi.post_img_num = subquery.min_img_num 
           ) pi
        ON p.post_num = pi.post_num                                          /* 각 게시물 별 가장먼저 등록한 이미지 서브쿼리 조인 */
RIGHT JOIN MEMBER m
        ON m.id_num = p.id_num
       AND m.locked !='FORBIDDEN'       
<if test="feedState=='USERFEED'">                                            /* 피드타입이 유저피드 */
   <if test="type=='TAGGED'">                                                /* 타입이 태그당한 게시물조건 */
RIGHT JOIN (
            SELECT post_num
              FROM MEMBER_TAG
             WHERE id_num = (
                              SELECT id_num
                                FROM MEMBER
                               WHERE nickname = #{nickname}
                            ) 
           ) mtSubQuery                                                      /* 매개변수로 받은 닉네임이 태그테이블에 존재하는 게시물 번호만 RIGHT JOIN */
        ON p.post_num = mtSubQuery.post_num
     WHERE p.only_me != 'ONLYME'                                             /* 나만 보기 게시물 제외 */
   </if>
</if>

<if test="feedState=='SEARCHFEED'">                                         /* 피드타입이 검색피드 */
INNER JOIN (
             SELECT DISTINCT post_num                                       /* hobby 테이블에서 게시물번호가 여러개 동일 나올 수 있음 */
               FROM HOBBY
              WHERE hobby LIKE CONCAT('%',#{keyword},'%')
           ) searchSubQuery	                                                /* 검색키워드가 관심사 테이블에 포함되는 게시물 번호만 조인 */ 
        ON p.post_num= searchSubQuery.post_num
</if> 
/* 조건 절 시작 */
<choose>
    <when test="feedState=='MAINFEED'">                                     /* 피드타입이 메인피드이면 */
WHERE 1=1 
  AND p.id_num IN (
                    SELECT following_id
                      FROM FOLLOW
                     WHERE 1=1 
                       AND id_num  = #{idNum}
                       AND approve = 'FOLLOWOK'  
                  )                                                        /* 팔로우 테이블에서 내가 팔로우한 유저이고 상태가 팔로우 승인완료인 상태인 게시물 번호만 필터링 */
  AND only_me = 'NOTONLYME'                                                 /* 나만보기 게시물 제외 */
ORDER BY p.create_date DESC
    </when>
    
    <when test="feedState=='GLOBALFEED'||feedState=='SEARCHFEED'">         /* 피드 타입이 글로벌 피드이거나 검색피드일 경우 */
WHERE 1=1 
  AND p.id_num IN(   
                  SELECT id_num
                    FROM MEMBER
                   WHERE 1=1 
                     AND locked = 'PUBLICID'    
                     AND NOT (id_num = #{idNum})                          /* 공개아이디 게시물, 내 게시물이 아닌 조건 */
                   UNION                                                  
                  SELECT following_id as id_num                           /* 팔로우 상태인 게시물(비공개 계정포함) */
                    FROM FOLLOW
                   WHERE 1=1 
                     AND id_num  = #{idNum}
                     AND approve = 'FOLLOWOK'    
                )
  AND only_me = 'NOTONLYME'                                       /* 나만보기 게시물 제외 */
ORDER BY <if test="feedState=='GLOBALFEED'">likeCount DESC,</if> p.create_date DESC     /*글로벌 피드의 경우 좋아요 수가 많은 순*/
    </when>
  
    <when test="feedState=='USERFEED'">                         /* 피드 타입이 유저피드인 경우 */
    
        <if test="type=='NORMAL'">                              /* 타입이 태그게시물이 아닌 작성게시물일 경우 */
WHERE 1=1 
  AND p.id_num = ( 
                  SELECT id_num
                    FROM MEMBER 
                   WHERE nickname=#{nickname}                   /* 매개 변수로 받은 닉네임의 게시물 */
                 )
        </if>
        <if test="!itsMe">                                     /* 현 유저피드가 내 피드가 아닌경우 */
  AND only_me = 'NOTONLYME'                                     /* 나만보기 게시물 제외 */
        </if>
ORDER BY p.create_date DESC     
    </when>
    
</choose>   
   LIMIT #{rowSize} OFFSET #{startRow}  
</select>
 
 <!--게시물 삽입과 동시에 pk를 반환받는다 .RequestDTO post_num 세팅-->
<insert id="postInsert" parameterType="WritePostDTO" useGeneratedKeys="true" keyProperty="postNum">
/*게시물 삽입(게시물테이블 관련)*/
INSERT INTO POST_DATA (id_num,content,only_me)
       VALUES(
              #{idNum}
             ,#{content}
             ,#{onlyMeState}
             )               /* 회원 고유번호, 게시물 내용, 나만보기 여부 */
</insert>
 <!--게시물 삽입과 동시에 게시물에 입력된 관심사들도 관심사 테이블에 인서트 -->
<insert id="hobbyInsert" parameterType="WritePostDTO">
/* 게시물 삽입(관심사 테이블 관련) */ 
<if test="hobbyList != null and hobbyList.size() > 0">
 INSERT INTO hobby (id_num, post_num, hobby) 
        VALUES
        <foreach collection="hobbyList" item="hobby" separator=",">
            (
            #{idNum}                        /* 회원고유번호 */
           ,#{postNum}                      /* 게시물 번호 */
           ,#{hobby}                        /* 관심사 이름 */
            )
        </foreach>
</if>
</insert>
 
<insert id="followTagInsert" parameterType="WritePostDTO">
/*게시물 삽입(회원 태그테이블 관련)*/
<if test="followTagList != null and followTagList.size() > 0">
 INSERT INTO member_tag (post_num, id_num)
        SELECT #{postNum}            /* 게시물 번호 */
             , id_num               /* 회원 고유번호 */
          FROM MEMBER
         WHERE nickname IN    
<foreach collection="followTagList" item="follow" open="(" separator="," close=")">
               #{follow}           /* 태그하는 사람의 닉네임 */
</foreach>        
</if>
</insert>	
 
 <!--s3업로드후 반환받은 url리스트를 게시물 사진 테이블에 인서트-->
<insert id="postImgInsert" parameterType="WritePostDTO">
/*게시물 삽입(이미지 테이블 관련)*/
<if test="imgUrlList != null and imgUrlList.size() > 0">
 INSERT INTO POST_IMG (post_num,post_img_url)
        VALUES
<foreach collection="imgUrlList" item="imgUrl" separator=",">
              (
               #{postNum}       /* 게시물 번호 */
              ,#{imgUrl}        /* 이미지 URL */
              )
</foreach>
</if>
</insert>
 <!-- 게시물 상세보기 정보-->
 <select id="postDetail" parameterType="GetPostDetailDTO" resultType="PostDetailDTO">
 /*게시물 상세보기*/
      SELECT p.post_num                      /* 게시물 번호 */
           , p.id_num                        /* 회원 고유번호 */
           , p.content                       /* 게시물 상세 내용 */
           , DATE_FORMAT(p.create_date, '%Y-%m-%d %H:%i') as create_date                   /* 생성일 */
           , DATE_FORMAT(p.edit_date, '%Y-%m-%d %H:%i') as edit_date                       /* 수정일 */
           , p.only_me                       /* 나만보기 여부 */
           , m.nickname                      /* 닉네임 */
           , m.profile                       /* 프로필 사진 이미지URL */
           , pl.likeCheck                    /* 현재 클릭한 유저의 좋아요 존재(눌림) 여부 */
           , GROUP_CONCAT(DISTINCT pi.post_img_url ORDER BY pi.post_img_num) AS strImgList                 /* 해당 게시물의 이미지 리스트를 , 형태로 나눈 스트링 형태 */
           , GROUP_CONCAT(DISTINCT hb.hobby ORDER BY hb.hb_num) AS strHobbyList                            /* 해당 게시물의 관심사 리스트를 , 형태로 나눈 스트링 형태 */
           , GROUP_CONCAT(DISTINCT member_tag.nickname ORDER BY mt.id_num) AS strTagList                   /* 해당 게시물의 태그멤버 리스트를 , 형태로 나눈 스트링 형태 */
           , GROUP_CONCAT(DISTINCT COALESCE(member_tag.profile,'NOPROFILE') ORDER BY mt.id_num) AS strTagProfiles /* 해당 게시물의 태그멤버의 프로필 리스트를 , 형태로 나눈 스트링 형태 */
           , (
              SELECT COUNT(*)
                FROM POST_LIKE pl
               WHERE pl.post_num = p.post_num
                 AND NOT EXISTS (   
                                      SELECT 1 
                                        FROM MEMBER m 
                                       WHERE m.id_num = pl.id_num
                                         AND m.locked = 'FORBIDDEN'
                                )                   /* 정지 계정 제외*/    
             ) as likeCount                         /* 좋아요 개수 */
        FROM POST_DATA p                            /* FROM 게시물 테이블 */
   LEFT JOIN MEMBER m                               /* 회원테이블 조인 */
          ON p.id_num   = m.id_num
   LEFT JOIN POST_IMG pi                            /* 게시물 이미지 테이블 조인 */
          ON p.post_num = pi.post_num
   LEFT JOIN HOBBY hb                               /* 관심사 테이블 조인 */
          ON p.post_num = hb.post_num
   LEFT JOIN MEMBER_TAG mt                          /* 회원 태그 테이블 조인 */
          ON p.post_num = mt.post_num
   LEFT JOIN MEMBER member_tag                    /* 회원테이블 + 회원태그 테이블 조인 */
          ON mt.id_num  = member_tag.id_num
   LEFT JOIN (
               SELECT post_num                /* 게시물 번호 */
                    , id_num as likeCheck     /* 좋아요 테이블에 회원고유번호를 체크 */
                 FROM POST_LIKE
                WHERE id_num = #{idNum}
             ) pl                             /* 좋아요 존재(눌림) 여부를 확인하기 위한 인라인 뷰조인 */
          ON p.post_num = pl.post_num
       WHERE p.post_num = #{postNum}
         AND NOT EXISTS (
                           SELECT subM.id_num 
                             FROM MEMBER subM 
                            WHERE subM.id_num = m.id_num
                              AND subM.locked ='FORBIDDEN' 
                        )
    GROUP BY p.post_num                       /* 게시물 번호 별 그루핑 */
</select>

<!-- 이미지리스트 s3이미지 삭제-->

<select id="postImgListByPostNum" parameterType="int" resultType="String">
/*게시물 별 이미지 리스트*/
SELECT post_img_url 
  FROM POST_IMG 
 WHERE post_num=#{postNum}              /* 게시물 번호 */
</select>

<!--게시물 삭제 -->
<delete id="postDelete" parameterType="postDelDTO">
/*게시물 삭제*/
DELETE 
  FROM POST_DATA 
 WHERE 1=1 
   AND post_num = #{postNum}            /* 게시물 번호 */
   AND id_num   = #{idNum}              /* 회원 번호 */
</delete>
<!-- 게시물 수정관련 시작 -->

<!--게시물 내용, 나만보기기능 , 수정일 업데이트 -->
<update id="postInformUpdate" parameterType="WritePostDTO">
/*게시물 수정(게시물 테이블)*/
UPDATE POST_DATA SET
       content   = #{content},              /* 게시물 상세내용 */
       only_me   = #{onlyMeState},          /* 나만보기 여부 */
       edit_date = CURRENT_TIMESTAMP        /* 수정일 */
 WHERE 1=1 
   AND post_num  = #{postNum}               /* 게시물 번호 */
   AND id_num    = #{idNum}                 /* 회원번호 */
</update>

<!--기존 이미지 삭제 -->
<delete id="deleteOriginalImg" parameterType="WritePostDTO">
/*이미지 삭제*/
DELETE 
  FROM POST_IMG
 WHERE 1=1 
   AND post_num = #{postNum}
   AND post_img_url IN (
<foreach collection="removeImgList" item="imgUrl" separator=",">
                       #{imgUrl}       /* 매개변수로 받은 이미지URL */
 </foreach>
                       )
</delete>

<!--기존 관심사 삭제 -->
<delete id="deleteOriginalHobby" parameterType="WritePostDTO">
/*관심사 삭제*/
DELETE 
  FROM HOBBY
 WHERE post_num = #{postNum}          /* 게시물 번호 */
</delete>
<!--기존 맴버태그 삭제-->
<delete id="deleteOriginalMemTag" parameterType="WritePostDTO">
/*회원 태그 삭제*/
DELETE 
  FROM MEMBER_TAG            
 WHERE post_num = #{postNum}       /* 게시물 번호 */
</delete>

<!--게시물 수정관련 종료 -->

 <!--좋아요 삽입-->
<insert id="postLikeInsert" parameterType="DoPostLikeDTO">
/*좋아요 삽입*/
INSERT INTO POST_LIKE (id_num,post_num)
	   VALUES(#{idNum},#{postNum})      /* 회원 번호, 게시물 번호 */
</insert> 
<!--좋아요 삭제-->
<delete id="postLikeDelete" parameterType="DoPostLikeDTO">
/*좋아요 삭제*/
DELETE 
  FROM POST_LIKE
 WHERE 1=1 
   AND post_num = #{postNum}            /* 게시물 번호 */
   AND id_num   = #{idNum}              /* 회원 번호 */
</delete>

<!--좋아요 작업 후 변경된 좋아요 수 -->
<select id="afterDoPostLike" parameterType="int" resultType="int">
/*좋아요 작업 후 변경된 좋아요 수*/
SELECT COUNT(*) as likeCount         /* 좋아요 수 */
  FROM POST_LIKE pl
 WHERE pl.post_num = #{postNum}      /* 게시물 번호 */
   AND NOT EXISTS (  
	                           SELECT 1 
                                 FROM MEMBER m 
                                WHERE m.id_num = pl.id_num
                                  AND m.locked = 'FORBIDDEN'
                   )                  /* 정지 계정 제외 */    
</select>
</mapper>
 